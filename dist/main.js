(()=>{"use strict";function t(t){let o=document.querySelector("#content");t.forEach((function(e,n,c){let r=document.createElement("div");r.setAttribute("id","toDoDiv"),console.log(`toDoArr item:${t} at index:${n}`),console.log(`item.title: ${e.title}`),r.textContent=e.title+" "+e.description+" "+e.dueDate+" "+e.priority,o.appendChild(r)}))}function o(t,o){return o.push(t),o}const e=(()=>{const e={projectA:[],projectB:[],projectC:[]},n=document.createElement("div");n.textContent="Project A";const c=document.createElement("div");c.textContent="Project B";const r=document.createElement("div");r.textContent="Project C";const i=document.querySelector("#content");return document.querySelector("#createToDoBtn").addEventListener("click",(function(){(e=>{const n=(()=>{let t=window.prompt("Enter title of ToDo:"),o=window.prompt("Enter description of ToDo:"),e=window.prompt("Enter due date of ToDo:"),n=window.prompt("Enter priority of ToDo:"),c=window.prompt("Enter the project you want this ToDo in:");if(""!=t&&null!=t&&""!=o&&null!=o&&""!=e&&null!=e&&""!=n&&null!=n){const r=((t,o,e,n,c)=>({title:t,description:o,dueDate:e,priority:n,location:c}))(t,o,e,n,c);return r}})();"projectA"==n.location?(o(n,e.projectA),t(e.projectA)):"projectB"==n.location?(o(n,e.projectB),t(e.projectB)):"projectC"==n.location?(o(n,e.projectC),t(e.projectC)):(o(n,e.projectA),t(e.projectA))})(e)})),n.addEventListener("click",(function(){t(e.projectA)})),c.addEventListener("click",(function(){t(e.projectB)})),r.addEventListener("click",(function(){t(e.projectC)})),i.appendChild(n),i.appendChild(c),i.appendChild(r),{todoList:e}})();console.log("project a: "+e.todoList.projectA),console.log("project b:"+e.todoList.projectB),console.log("project c:"+e.todoList.projectC)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,