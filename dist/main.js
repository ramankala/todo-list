(()=>{"use strict";const t=()=>{let t=document.querySelector("#content");for(;t.firstChild;)t.removeChild(t.firstChild)},e=()=>{let t=document.querySelector("#bodyTitle");for(;t.firstChild;)t.removeChild(t.firstChild)},o=t=>{e();const o=document.querySelector("#bodyTitle"),n=document.createElement("div");n.classList.add("title1");const i=document.createElement("div");i.classList.add("title2"),i.textContent="Due Date",""==t||null==t?(n.textContent="Default",o.appendChild(n)):(n.textContent=t,o.appendChild(n)),o.appendChild(i)};function n(t){let e=document.querySelector("#content");t.forEach((function(o,n,i){let l=document.createElement("div"),r=document.createElement("div");r.classList.add("titleDiv");let d=document.createElement("div");d.classList.add("descDiv");let c=document.createElement("div");c.classList.add("dueDiv");let s=document.createElement("div");console.log(`item.priority = ${o.priority}`),"high"==o.priority?s.classList.add("highPriority"):"medium"==o.priority?s.classList.add("mediumPriority"):s.classList.add("lowPriority");let a=document.createElement("input");a.type="checkbox",a.addEventListener("click",(function(){o.toggle(),console.log(`item.isComplete: ${o.isComplete}`)})),r.textContent=o.title,d.textContent=o.description,c.textContent=o.dueDate,l.appendChild(s),l.appendChild(a),l.appendChild(r),l.appendChild(d),l.appendChild(c),l.setAttribute("id","toDoDiv"),console.log(`toDoArr item:${t} at index:${n}`),console.log(`item.title: ${o.title}`),e.appendChild(l)}))}function i(t,e){return e.push(t),e}const l=(()=>{const l={defaultProj:[]};return o(),(i=>{const l=document.createElement("div");l.classList.add("newProj"),l.textContent="Default";const r=document.querySelector("#projectList");l.addEventListener("click",(function(){t(),n(i.defaultProj),e(),o()})),r.appendChild(l)})(l),(e=>{document.querySelector("#createToDoBtn").addEventListener("click",(function(){(e=>{const o=(()=>{let t=window.prompt("Enter title of ToDo:"),e=window.prompt("Enter description of ToDo:"),o=window.prompt("Enter due date of ToDo:"),n=window.prompt("Enter priority of ToDo(High, Medium, or Low):");n=n.toLowerCase();let i=window.prompt("Enter the project you want this ToDo in:");if(i=i.toLowerCase(),""!=t&&null!=t&&""!=e&&null!=e&&""!=o&&null!=o&&""!=n&&null!=n){const l=((t,e,o,n,i,l=!1)=>{let r={title:t,description:e,dueDate:o,priority:n,location:i,isComplete:l};return{get title(){return r.title},get description(){return r.description},get dueDate(){return r.dueDate},get priority(){return r.priority},get location(){return r.location},get isComplete(){return r.isComplete},toggle(){r.isComplete=!r.isComplete}}})(t,e,o,n,i);return l}})();"default"==o.location||""==o.location||null==o.location?(i(o,e.defaultProj),t(),n(e.defaultProj)):(i(o,e[o.location]),t(),n(e[o.location]))})(e)}))})(l),document.querySelector("#createProjectBtn").addEventListener("click",(function(){(i=>{const l=document.querySelector("#projectList"),r=document.createElement("div");r.classList.add("newProj");const d=window.prompt("Enter name of project:");let c=d.toLowerCase();r.textContent=d,i[c]=[],r.addEventListener("click",(function(l){t(),n(i[c]),e(),o(d)})),l.appendChild(r)})(l)})),{toDoList:l}})();console.log("project a: "+l.toDoList.defaultProj)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,